# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing


## to set the tox core settings
[tox]
# to set tox version use
min_version = 4

# a list of environments to run by default (when the user does not specify anything during the invocation)
envlist = typechecks, stylechecks, lint, fetch_data, train_model, test_model

# with default value of false, flag indicating to perform the packaging operation or not.
# Set it to true when using tox for an application, instead of a library
skipsdist = True


## to set the environment sections. All tox environments by default inherit setting from the testenv section
[testenv]
# Name or path to a Python interpreter which will be used for creating the virtual environment, first one found wins.
basepython = python

# Determines the command used for installing packages into the virtual environment;
# both the package under test and its dependencies (defined with deps)
# install_command = pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org {opts} {packages}
install_command = pip install {opts} {packages}

# If you want to allow all external commands you can use allowlist_externals=* which will match all commands (not recommended).
allowlist_externals = train_model

# A dictionary of environment variables to set when running commands in the tox environment.
# Lines starting with a file| prefix define the location of environment file.
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

# KAGGLE_USERNAME and KAGGLE_KEY are passed in passenv to be able to download the training data from KAGGLE account.
# GEMFURY_PUSH_URL is needed because we will recall that in our publish model script "Gemfury_packaging_publishing.sh".
passenv =
	KAGGLE_USERNAME
	KAGGLE_KEY
	GEMFURY_PUSH_URL


## to set the environment sections of fetch_data
[testenv:fetch_data]
# unzip data - linux command
# allowlist_externals = unzip

# unzip data - for windows: use Windows Command Prompt (CMD) without invoking PowerShell
allowlist_externals = tar

# unzip data - for windows : to run the PowerShell command within the Windows Command Prompt (CMD)
# allowlist_externals = powershell

envdir = {toxworkdir}/train_test_model

deps =
	kaggle<2.0.0

commands =
	# fetch data from kaggle site
	kaggle competitions download -c titanic -p ./classification_model/datasets
	
	# unzip data - linux command 
	# unzip ./classification_model/datasets/titanic.zip -d ./classification_model/datasets
	
	# unzip data - for windows: run the PowerShell command within the Windows Command Prompt (CMD)
	# powershell -Command "Expand-Archive -Path classification_model/datasets/titanic.zip -DestinationPath classification_model/datasets"
	
	# unzip data - for windows: use Windows Command Prompt (CMD) without invoking PowerShell 
	tar -xf classification_model/datasets/titanic.zip -C classification_model/datasets


## to set the environment sections of train_model
[testenv:train_model]
# use the envdir of train_test_model environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/train_test_model

# use the deps of train_test_model environment sections
deps =
     {[testenv:train_test_model]deps}

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.
	 
# The commands to be called for testing
commands =
	python classification_model/training_model/train.py


## to set the environment sections of test_model
[testenv:test_model]
# use the envdir of train_test_model environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/train_test_model

# use the deps of train_test_model environment sections
deps =
     {[testenv:train_test_model]deps}

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing
# With this command, we will execute all file in test folder ({posargs:tests/})
commands =
    pytest \
	-s \
	-vv \
	{posargs:tests/}


## to set the environment sections of train_test_model
[testenv:train_test_model]
# use the envdir of train_test_model environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/train_test_model

# Name of the Python dependencies. Installed into the environment prior to project after environment creation, but before package installation
deps =
	-r{toxinidir}/requirements/test_requirements.txt

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing. Only execute if commands_pre succeed. Each line is interpreted as one command; however a command can be split over multiple lines by ending the line with the \ character.
# Commands will execute one by one in sequential fashion until one of them fails (their exit code is non-zero) or all of them succeed
commands =
	python classification_model/training_model/train.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}


## to set the environment sections of typechecks
[testenv:typechecks]
# use the envdir of train_test_model environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/checks

# use the deps of train_test_model environment sections
deps =
     {[testenv:checks]deps}

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing
commands =
	# python -m pip install -U git+https://github.com/python/mypy.git
	mypy classification_model tests
	#{posargs:mypy classification_model tests}


## to set the environment sections of stylechecks
[testenv:stylechecks]
# use the envdir of train_test_model environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/checks

# use the deps of train_test_model environment sections
deps =
     {[testenv:checks]deps}

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing
commands =
	flake8 classification_model tests
	ruff format classification_model tests
	#{posargs:flake8 classification_model tests}


## to set the environment sections of lint
[testenv:lint]
# use the envdir of checks environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/checks

# use the deps of train_test_model environment sections
deps =
	 {[testenv:checks]deps}

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing
commands =
	isort classification_model tests
	# black classification_model tests
	ruff check classification_model tests
	mypy classification_model tests
	flake8 classification_model tests
	# {posargs:mypy classification_model tests}


## to set the environment sections of checks
[testenv:checks]
# use the envdir of checks environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/checks

# use the deps of train_test_model environment sections
deps =
	-r{toxinidir}/requirements/typing_requirements.txt

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing
commands =
	flake8 classification_model tests
	isort classification_model tests
	# black classification_model tests
	ruff format classification_model tests
	ruff check classification_model tests
	mypy classification_model tests
	# {posargs:mypy classification_model tests}
	

## to set the environment sections of flake8
[flake8]
# The exclude setting specifies a comma-separated list of directories or files that should be excluded from linting.
exclude = .git, env, .tox
# The max-line-length setting specifies the maximum allowed line length for your code.
# Lines of code longer than this limit may trigger a linting error or warning.
max-line-length = 100