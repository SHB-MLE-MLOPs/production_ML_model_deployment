# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing

[pytest]
log_cli_level=WARNING

[tox]
# to set the tox core settings

# to set tox version use
min_version = 4

# a list of environments to run by default (when the user does not specify anything during the invocation)
envlist = test_package, test_api, run_api, checks, checks_mod 

# with default value of false, flag indicating to perform the packaging operation or not. Set it to true when using tox for an application, instead of a library
skipsdist = True

[testenv]
# to set the environment sections
# all tox environments by default inherit setting from the testenv section

# Name or path to a Python interpreter which will be used for creating the virtual environment, first one found wins. 
# This determines in practice the Python for what we’ll create a virtual isolated environment. Use this to specify the Python version for a tox environment. 
# If not specified, the virtual environments factors (e.g. name part) will be used to automatically set one. For example, py310 means python3.10, py3 means python3 and py means python. 
# If the name does not match this pattern the same Python version tox is installed into will be used
basepython = python

# Determines the command used for installing packages into the virtual environment; both the package under test and its dependencies (defined with deps)
install_command = pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org {opts} {packages}

# Each line specifies a command name (in glob-style pattern format) which can be used in the commands section even if it’s located outside of the tox environment. 
# For example: if you use the unix rm command for running tests you can list allowlist_externals=rm or allowlist_externals=/usr/bin/rm. 
# If you want to allow all external commands you can use allowlist_externals=* which will match all commands (not recommended).
# allowlist_externals = train


[testenv:test_api]
# to set the environment sections of test_api

# Directory assigned to the tox test_api environment. If not absolute it would be treated as relative to tox_root
envdir = {toxworkdir}/test_api

# Name of the Python dependencies. Installed into the environment prior to project after environment creation, but before package installation
deps =
	-r{toxinidir}/test_requirements.txt

# A dictionary of environment variables to set when running commands in the tox environment. Lines starting with a file| prefix define the location of environment file.
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

# The commands to be called for testing. Only execute if commands_pre succeed. Each line is interpreted as one command; however a command can be split over multiple lines by ending the line with the \ character.
# Commands will execute one by one in sequential fashion until one of them fails (their exit code is non-zero) or all of them succeed
commands=
	pytest \
	-vv \
	{posargs:building_fastapi_api/tests/}


[testenv:run_api]
# to set the environment sections of run

# use the envdir of test_api environment sections 
envdir = {toxworkdir}/run_api

# use the deps of test_api environment sections
deps =
	{[testenv:test_api]deps}

# use the setenv of test_api environment sections
setenv =
	{[testenv:test_api]setenv}

# The commands to be called for testing
commands=
	python building_fastapi_api/create_fastapi_api.py


[testenv:checks_api]
# to set the environment sections of checks

# use the envdir of checks environment sections witch is created by default in the [tox]
envdir = {toxworkdir}/checks

# Name of the Python dependencies. Installed into the environment prior to project after environment creation, but before package installation
deps =
	-r{toxinidir}/typing_requirements.txt

## The commands to be called for testing
## This commands are typically used as part of a build system, continuous integration (CI), or test automation process. 
## It's include in this file to automate code linting, code formatting, and type checking as part of a development workflow or a CI/CD pipeline.
# flake8 is a Python tool for linting Python code (in both the classification_model and tests directories here) to check for style and programming errors.
# isort is a Python tool for sorting Python import statements within your code (in both the classification_model and tests directories here) to follow a consistent style.  It ensures that your imports are organized consistently.
# {posargs:mypy classification_model} is a command that appears to be related to type checking with MyPy, a type checker for Python. {posargs} is used to allow passing additional arguments when running the command
commands =
	flake8 building_fastapi_api
	isort building_fastapi_api
	black building_fastapi_api
	{posargs:mypy building_fastapi_api}


[flake8]
# The exclude setting specifies a comma-separated list of directories or files that should be excluded from linting. 
# In this case, it's excluding the .git directory and an env directory. These directories are commonly excluded because they typically contain code that isn't meant to be linted, 
# like version control system files (git) or virtual environment directories (env).
exclude = .git,__pycache__,__init__.py,.mypy_cache,.pytest_cache,.venv,alembic,env
# The max-line-length setting specifies the maximum allowed line length for your code. Lines of code longer than this limit may trigger a linting error or warning.
max-line-length = 88

[testenv:test_package]
# to set the environment sections of test_package

# use the envdir of test_package environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/test_package

# Name of the Python dependencies. Installed into the environment prior to project after environment creation, but before package installation
deps =
	-r{toxinidir}/test_requirements.txt

# A dictionary of environment variables to set when running commands in the tox environment. Lines starting with a file| prefix define the location of environment file.
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

# The commands to be called for testing. Only execute if commands_pre succeed. Each line is interpreted as one command; however a command can be split over multiple lines by ending the line with the \ character.
# Commands will execute one by one in sequential fashion until one of them fails (their exit code is non-zero) or all of them succeed
commands=
	python classification_model/training_model/train.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}

	
[testenv:train]
# to set the environment sections of train

# use the envdir of test_package environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/test_package

# use the deps of test_package environment sections
deps =
     {[testenv:test_package]deps}

# use the setenv of test_package environment sections
setenv =
	{[testenv:test_package]setenv}
	 
# The commands to be called for testing
commands=
	python classification_model/training_model/train.py

	
[testenv:pred]
# to set the environment sections of pred

# use the envdir of test_package environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/test_package

# use the deps of test_package environment sections
deps =
     {[testenv:test_package]deps}

# use the setenv of test_package environment sections
setenv =
	{[testenv:test_package]setenv}

# The commands to be called for testing
commands=
	python tests/test_new_prediction.py
    pytest \
	-s \
	-vv \
	{posargs:tests/}

	
[testenv:checks_mod]
# to set the environment sections of pred

# use the envdir of checks environment sections witch is already created by default in the [tox]
envdir = {toxworkdir}/checks

# use the deps of test_package environment sections
deps =
	-r{toxinidir}/typing_requirements.txt

# You can also set setenv but it by default inherit setting from the [testenv] section, 
# So train environment sections has the same setenv like [testenv] section.

# The commands to be called for testing
commands =
	flake8 classification_model tests
	isort classification_model tests
	{posargs:mypy classification_model}


[flake8_mod]
exclude = .git,env
max-line-length = 100